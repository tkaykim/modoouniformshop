---
description:
globs:
alwaysApply: true
---
# 기술 요구 사항 문서 (TRD)

## 1. 기술 요약
- **프로젝트 개요**: 단체복 및 굿즈 제작을 원하는 개인/소규모 단체를 위한 반응형 웹 서비스 개발. 대화형 설문을 통해 빠른 견적 확인을 지원하고, 운영팀은 실시간 문의 배정 및 관리를 수행합니다. 사회적 증거(리뷰)를 활용하여 전환율을 극대화합니다.
- **핵심 기술 스택**: Next.js, TypeScript, TailwindCSS, Supabase (PostgreSQL, Storage, Auth, Edge Functions), Vercel, Toss Payments
- **주요 기술 목표**: 빠른 상담 접수, 전환율 향상, 운영 효율성 증대, 고객 만족도 향상
- **주요 기술 가정**: 안정적인 Supabase 서비스, 카카오 알림톡 연동 가능, 사용자 네트워크 환경 양호

## 2. 기술 스택

| 카테고리 | 기술 / 라이브러리 | 이유 (프로젝트 선택 이유) |
|---|---|---|
| 프레임워크 | Next.js | 서버 사이드 렌더링(SSR) 및 정적 사이트 생성(SSG) 지원, SEO 최적화, 빠른 초기 로딩 속도 |
| 언어 | TypeScript | 안정적인 코드 유지보수, 타입 안정성, 개발 생산성 향상 |
| 스타일링 | TailwindCSS | 빠른 UI 개발, 일관된 디자인 시스템, 반응형 디자인 지원 |
| 데이터베이스 | Supabase (PostgreSQL) | 안정적인 관계형 데이터베이스, 실시간 데이터 구독 지원, 확장성 |
| 스토리지 | Supabase Storage | 이미지 및 파일 저장, CDN 통합 |
| 인증 | Supabase Auth | 간편한 사용자 인증 및 권한 관리, 소셜 로그인 지원 |
| 서버리스 함수 | Supabase Edge Functions | 백엔드 로직 처리, API 엔드포인트 구현 |
| 배포 | Vercel | 간편한 배포, 자동 스케일링, 글로벌 CDN |
| 결제 | Toss Payments | 간편한 결제 API, 다양한 결제 수단 지원 |
| 알림 | Kakao 알림톡, SendGrid | 사용자 알림 발송, 빠른 정보 전달 |

## 3. 시스템 아키텍처 설계

### 최상위 빌딩 블록
*   **Frontend (Next.js)**:
    *   사용자 인터페이스 및 사용자 경험 제공
    *   대화형 설문, 리뷰 목록/상세 페이지, 진행 상황 알림 기능 구현
    *   서브 빌딩 블록:
        *   UI 컴포넌트 (React 컴포넌트)
        *   페이지 라우팅 (Next.js 라우터)
        *   상태 관리 (React Context, Zustand)
*   **Backend (Supabase Edge Functions)**:
    *   API 엔드포인트 제공, 데이터 처리 로직 수행
    *   설문 데이터 저장, 리뷰 CRUD, 알림 발송 기능 구현
    *   서브 빌딩 블록:
        *   API 핸들러 (Edge Function)
        *   데이터베이스 쿼리 (PostgreSQL)
        *   외부 서비스 연동 (Kakao 알림톡, SendGrid)
*   **Database (Supabase PostgreSQL)**:
    *   데이터 저장 및 관리
    *   사용자 정보, 설문 데이터, 리뷰 데이터 저장
    *   서브 빌딩 블록:
        *   테이블 스키마 정의
        *   RLS (Row Level Security) 정책
*   **Admin Dashboard (Next.js)**:
    *   운영 담당자를 위한 관리 인터페이스 제공
    *   문의 관리, 리뷰 관리, 데모 보드 기능 구현
    *   서브 빌딩 블록:
        *   UI 컴포넌트 (React 컴포넌트)
        *   데이터 그리드
        *   차트

### 최상위 컴포넌트 상호 작용 다이어그램
```mermaid
graph TD
    A[Frontend (Next.js)] --> B[Backend (Supabase Edge Functions)]
    B --> C[Database (Supabase PostgreSQL)]
    A --> D[Toss Payments API]
    B --> E[Kakao 알림톡 API]
    B --> F[SendGrid API]
    G[Admin Dashboard (Next.js)] --> B
```

*   **Frontend (Next.js) <-> Backend (Supabase Edge Functions)**: 사용자는 웹 페이지를 통해 설문 작성, 리뷰 조회 등의 작업을 수행하며, Frontend는 API를 통해 Backend에 데이터를 요청하고 응답을 받습니다.
*   **Backend (Supabase Edge Functions) <-> Database (Supabase PostgreSQL)**: Backend는 API 요청을 받아 데이터베이스에 데이터를 저장하거나 조회합니다. Supabase Edge Functions는 데이터베이스와 상호 작용하여 필요한 데이터를 처리합니다.
*   **Frontend (Next.js) <-> Toss Payments API**: 결제 시 Frontend는 Toss Payments API를 호출하여 결제를 진행합니다.
*   **Backend (Supabase Edge Functions) <-> Kakao 알림톡 API/SendGrid API**: 상태 변경 등의 이벤트 발생 시 Backend는 Kakao 알림톡 API 또는 SendGrid API를 호출하여 사용자에게 알림을 발송합니다.
*   **Admin Dashboard (Next.js) <-> Backend (Supabase Edge Functions)**: 관리자는 Admin Dashboard를 통해 문의 관리, 리뷰 관리 등의 작업을 수행하며, Frontend는 API를 통해 Backend에 데이터를 요청하고 응답을 받습니다.

### 코드 구성 및 규칙

**도메인 기반 조직 전략**
- **도메인 분리**: 사용자 관리, 결제 처리, 콘텐츠 관리 등 비즈니스 도메인/제한된 컨텍스트별로 코드 구성
- **계층 기반 아키텍처**: 프레젠테이션, 비즈니스 로직, 데이터 액세스, 인프라 등 별개의 계층으로 관심사 분리
- **기능 기반 모듈**: 기술적 관심사별로 분리하기보다는 관련 기능을 함께 그룹화
- **공유 컴포넌트**: 전용 공유 모듈에서 일반 유틸리티, 유형 및 재사용 가능한 컴포넌트 사용

**보편적인 파일 및 폴더 구조**
```
/
├── components/               # 재사용 가능한 UI 컴포넌트
│   ├── Button.tsx
│   ├── Input.tsx
│   └── ...
├── pages/                    # Next.js 페이지 라우팅
│   ├── index.tsx             # 홈 페이지
│   ├── inquiry.tsx           # 설문 페이지
│   ├── reviews.tsx           # 리뷰 페이지
│   └── admin/              # 관리자 페이지
│       ├── dashboard.tsx
│       └── ...
├── utils/                    # 유틸리티 함수
│   ├── api.ts                # API 호출 함수
│   ├── validation.ts         # 유효성 검사 함수
│   └── ...
├── types/                    # TypeScript 타입 정의
│   ├── inquiry.ts            # 설문 관련 타입
│   ├── review.ts             # 리뷰 관련 타입
│   └── ...
├── services/                 # 외부 서비스 연동 로직
│   ├── kakao-alert.ts        # 카카오 알림톡 연동
│   ├── sendgrid.ts           # SendGrid 연동
│   └── ...
├── public/                   # 정적 파일 (이미지, 폰트 등)
│   ├── images/
│   └── ...
├── .env.local                # 환경 변수
├── next.config.js            # Next.js 설정 파일
├── tailwind.config.js        # TailwindCSS 설정 파일
├── tsconfig.json             # TypeScript 설정 파일
└── ...
```

### 데이터 흐름 및 통신 패턴
- **클라이언트-서버 통신**: API 요청/응답 패턴 (RESTful API)
- **데이터베이스 상호 작용**: Supabase 클라이언트 라이브러리 사용, RLS 정책 적용
- **외부 서비스 통합**: Kakao 알림톡 API, SendGrid API 연동
- **실시간 통신**: Supabase Realtime 구독 (선택 사항, 폴링으로 대체 가능)
- **데이터 동기화**: 분산된 컴포넌트 간의 일관성 패턴

## 4. 성능 및 최적화 전략
- 이미지 최적화: 이미지 크기 조정, 압축, Lazy Loading 적용
- 코드 분할: Next.js Dynamic Import를 사용하여 초기 로딩 속도 개선
- 캐싱: Supabase Edge Functions 캐싱, 브라우저 캐싱 활용
- 데이터베이스 쿼리 최적화: 인덱싱, 쿼리 성능 분석
- CDN 활용: Supabase Storage CDN, Vercel CDN 활용

## 5. 구현 로드맵 및 마일스톤

### 1단계: 기반 구축 (MVP 구현)
- **핵심 인프라**: 기본 시스템 설정 및 기반 컴포넌트 구축
- **필수 기능**: 최소 실행 가능 제품 기능 구현 (홈, 리뷰, 설문 플로우(1~3,8,9단계) 완전 동작)
- **기본 보안**: 기본적인 보안 구현 (Supabase RLS, env secret 관리)
- **개발 환경**: 개발 환경 설정 및 CI/CD 기본 설정
- **예상 완료 기간**: 4주

### 2단계: 기능 개선
- **고급 기능**: MVP 이상의 확장된 기능 구현 (Admin 문의/리뷰 관리 기본 CRUD, 카카오톡/이메일 알림 1개 템플릿 적용(`awaiting_reply`→`in_progress`))
- **성능 최적화**: 시스템 성능 개선
- **보안 강화**: 고급 보안 기능 및 규정 준수 (카카오 알림톡 심사 완료)
- **모니터링 구현**: 종합적인 관찰 가능성 설정
- **예상 완료 기간**: 4주

## 6. 위험 평가 및 완화 전략

### 기술적 위험 분석
- **기술 위험**: 잠재적인 기술적 문제 및 복잡성 문제 (Supabase, Next.js, Vercel에 대한 의존성)
- **성능 위험**: 확장성 및 성능 병목 현상 (트래픽 증가, 데이터베이스 쿼리 성능)
- **보안 위험**: 잠재적인 보안 취약점 및 공격 벡터 (Supabase RLS 설정 오류, XSS, CSRF 공격)
- **통합 위험**: 타사 서비스 종속성 및 실패 지점 (Kakao 알림톡, SendGrid, Toss Payments)
- **완화 전략**:
    - 기술 스택에 대한 충분한 학습 및 숙지
    - 성능 테스트 및 최적화
    - 보안 취약점 점검 및 보안 강화
    - 타사 서비스 장애 대비 대체 방안 마련

### 프로젝트 전달 위험
- **일정 위험**: 개발 일정 문제 및 종속성 (카카오 알림톡 심사 지연)
- **리소스 위험**: 팀 역량 및 기술 전문성 요구 사항 (Supabase 전문가 부족)
- **품질 위험**: 코드 품질 및 테스트 커버리지 문제 (테스트 코드 부족)
- **배포 위험**: 프로덕션 배포 및 환경 문제 (Vercel 배포 문제)
- **비상 계획**:
    - 카카오 알림톡 심사 지연 시 이메일 알림으로 대체
    - Supabase 전문가 확보 또는 교육
    - 테스트 코드 작성 및 코드 리뷰 강화
    - Vercel 배포 문제 발생 시 대체 배포 플랫폼 고려

